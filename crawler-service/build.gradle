/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5/userguide/tutorial_java_projects.html
 */



buildscript {

    dependencies {
        classpath 'mysql:mysql-connector-java:8.0.13'
        classpath 'org.yaml:snakeyaml:1.21'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1'
        classpath 'com.google.guava:guava:27.0.1-jre'
    }
}


plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    id 'jacoco'
    // following for Spring boot
    id 'org.springframework.boot' version '1.5.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    // lombok
    id "io.freefair.lombok" version "3.8.0"
    // database migration
    id 'org.flywaydb.flyway' version '5.1.4'
    // find bugs
    id "com.github.spotbugs" version "2.0.0"
    // perform quality checks on java code
    // id 'checkstyle'
    // code analyzer
    // id 'pmd'
    // test coverage
    // id 'jacoco'
}
apply plugin: 'com.palantir.docker'

version = '1.0'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    compile 'com.google.guava:guava:27.1-jre'
    compile 'org.springframework.boot:spring-boot-dependencies:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-jdbc:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-logging:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-aop:1.5.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:1.5.7.RELEASE'
    compile group: 'org.apache.solr', name: 'solr-solrj', version: '8.2.0'
    compile group: 'com.panforge', name: 'robots', version: '1.4.2'
    compile 'mysql:mysql-connector-java:8.0.13'
    compile 'net.sourceforge.htmlunit:htmlunit:2.33'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.12'
    compile group: 'com.panforge', name: 'robots', version: '1.4.2'


    implementation 'org.flywaydb:flyway-core:5.1.4'
    // compile group: 'org.yaml', name: 'snakeyaml', version: '1.23'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:1.5.7.RELEASE'
    testImplementation 'org.flywaydb:flyway-core:5.1.4'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

def profile = '';
if (project.hasProperty('develop')) {
    profile = 'develop'
}
if (project.hasProperty('production')) {
    profile = 'production'
}

def applicationConfig = new org.yaml.snakeyaml.Yaml().load(("crawler-service/src/main/resources/application-${profile ? profile : 'default'}.yml" as File).text)


lombok {
    version = '1.18.8'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    excludeFilter = file('../config/spotbugs/spotbugs-exclude.xml')
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//pmd {
//  ruleSetFiles = files("../config/pmd/pmd.xml")
//}

flyway {
    url = (applicationConfig.spring.datasource.url =~ /(.*\/\/.*\/).*/)[0][1] // Extract URL
    user = applicationConfig.spring.datasource.username
    password = applicationConfig.spring.datasource.password
    schemas = [(applicationConfig.spring.datasource.url =~ /.*\/\/.*\/([^?]*)(\?.*)?/)[0][1]] // Extract DB name
}


application {
    // Define the main class for the application
    mainClassName = 'com.topcoder.productsearch.Application'
}


jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/**/Application**', 'com/**/securities/**', 'com/panforge/robotstxt/**'])
        }))
    }
}

bootRun {
    // with Parameters
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    // with JVM Parameters
    if ( project.hasProperty('jvmArgs') ) {
        jvmArgs project.jvmArgs.split(',')
    }
}

bootRepackage {
    mainClass = 'com.topcoder.productsearch.Application'
}

def jarPath = jar.archivePath

docker {
  dependsOn build
  name "tc3/productsearch-service-${profile ? profile : 'default'}:${version}"
  files jar.archivePath
  buildArgs([
    'PROFILE': profile,
    'JAR_FILE': jar.archiveName
  ])
}
