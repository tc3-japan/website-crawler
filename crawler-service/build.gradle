/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5/userguide/tutorial_java_projects.html
 */

buildscript {

    dependencies {
            classpath 'org.yaml:snakeyaml:1.21'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // following for Spring boot
    id 'org.springframework.boot' version '1.5.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'

    // database migration
    id 'org.flywaydb.flyway' version '5.1.4'
    // find bugs
    id "com.github.spotbugs" version "2.0.0"
    // perform quality checks on java code
    // id 'checkstyle'
    // code analyzer
    id 'pmd'
    // test coverage
    id 'jacoco'

}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  excludeFilter = file('../config/spotbugs/spotbugs-exclude.xml')
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'




repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    implementation 'org.springframework.boot:spring-boot-dependencies:1.5.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // compile group: 'org.yaml', name: 'snakeyaml', version: '1.23'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

def profile = '';
if(project.hasProperty('develop')) {
  profile = 'develop'
}
if(project.hasProperty('production')) {
  profile = 'production'
}

def applicationConfig = new org.yaml.snakeyaml.Yaml().load(("crawler-service/src/main/resources/application-${profile ? profile : 'default'}.yml" as File).text)

flyway {
  url = (applicationConfig.spring.datasource.url =~ /(.*\/\/.*\/).*/)[0][1] // Extract URL
  user = applicationConfig.spring.datasource.username
  password = applicationConfig.spring.datasource.password
  schemas = [(applicationConfig.spring.datasource.url =~ /.*\/\/.*\/([^?]*)(\?.*)?/)[0][1]] // Extract DB name
}

application {
    // Define the main class for the application
    mainClassName = 'com.topcoder.web.crawler.Application'
}
